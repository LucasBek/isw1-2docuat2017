TestCase subclass: #CustomerImporterTest	instanceVariableNames: 'customerImporter session inputStream'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-1-Test'!!CustomerImporterTest methodsFor: 'tests' stamp: 'LJ 11/7/2017 01:16'!assertAddress: anAddress hasTown: aTown andProvince: aProvince andZipCode: aZipCode andStreetName: aStreetName andStretNumber: aStreetNumber	self assert: anAddress town equals: aTown.	self assert: anAddress province equals: aProvince .	self assert: anAddress zipCode equals: aZipCode .	self assert: anAddress streetName equals: aStreetName.	self assert: anAddress streetNumber equals: aStreetNumber.! !!CustomerImporterTest methodsFor: 'tests' stamp: 'LJ 11/7/2017 01:37'!fileDataTest	^ ReadStream on: 'C,Pepe,Sanchez,D,22333444A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'.! !!CustomerImporterTest methodsFor: 'tests' stamp: 'LJ 11/7/2017 00:57'!selectCustomer: anIdentificationNumber withType: aType	| customers |	customers := session		select: [ :aCustomer | 			aCustomer identificationNumber = anIdentificationNumber				and: [ aCustomer identificationType = aType ] ]		ofType: Customer.	self assert: customers size equals: 1.	^ customers anyOne! !!CustomerImporterTest methodsFor: 'tests' stamp: 'LJ 11/7/2017 01:18'!assertPepeCustomerImportedCorrectly	| pepeCustomer olivosAddress floridaAddress |	pepeCustomer := self selectCustomer: '22333444' withType: 'D'.	self		assertCustomer: pepeCustomer		hasIdentificationNumber: '22333444'		andIdentificationType: 'D'		andFirstName: 'Pepe'		andLastName: 'Sanchez'.			self assert: pepeCustomer addresses size equals: 2.		olivosAddress := self selectCustomerAddress: pepeCustomer withTown: 'Olivos'.		self assertAddress: olivosAddress hasTown: 'Olivos'  andProvince: 'BsAs' andZipCode: 1636 andStreetName: 'San Martin'  andStretNumber: 3322.		floridaAddress := self selectCustomerAddress: pepeCustomer withTown: 'Florida'.  		self assertAddress: floridaAddress hasTown: 'Florida'  andProvince: 'Buenos Aires' andZipCode: 1122 andStreetName: 'Maipu'  andStretNumber: 888.! !!CustomerImporterTest methodsFor: 'tests' stamp: 'LJ 11/7/2017 01:22'!assertJuanCustomerImportedCorrectly	| juanCustomer alemAddress  |	juanCustomer := self selectCustomer: '23-25666777-9' withType: 'C'.	self		assertCustomer: juanCustomer		hasIdentificationNumber: '23-25666777-9'		andIdentificationType: 'C'		andFirstName: 'Juan'		andLastName: 'Perez'.			self assert: juanCustomer addresses size equals: 1.		alemAddress := self selectCustomerAddress: juanCustomer withTown: 'CABA'.		self assertAddress: alemAddress hasTown: 'CABA'  andProvince: 'CABA' andZipCode: 1001 andStreetName: 'Alem'  andStretNumber: 1122.! !!CustomerImporterTest methodsFor: 'tests' stamp: 'LJ 11/7/2017 01:18'!test01ImportCustomersWorksCorrectly	self importCustomers.	self assertPepeCustomerImportedCorrectly.	self assertJuanCustomerImportedCorrectly.! !!CustomerImporterTest methodsFor: 'tests' stamp: 'LJ 11/7/2017 01:04'!assertCustomer: aCustomer hasIdentificationNumber: anIdentificationNumber andIdentificationType: anIdentificationType andFirstName: aFirstName andLastName: aLastName	self assert: aCustomer identificationNumber equals: anIdentificationNumber.	self assert: aCustomer identificationType equals: anIdentificationType.	self assert: aCustomer firstName equals: aFirstName.	self assert: aCustomer lastName equals: aLastName.! !!CustomerImporterTest methodsFor: 'tests' stamp: 'LJ 11/7/2017 01:10'!selectCustomerAddress: aCustomer withTown: aTown	^ aCustomer addresses		detect: [ :anAddress | anAddress town = aTown ].! !!CustomerImporterTest methodsFor: 'importing' stamp: 'LJ 11/7/2017 01:32'!setUp		customerImporter := CustomerImporter new.	inputStream := self fileDataTest.	session := DataBaseSession		for:			(Array				with:					(ClassMapping						withDefaultTableNameFor: Address						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #streetName)								with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)								with: (EmbededMapping withDefaultFieldNameFor: #town)								with: (EmbededMapping withDefaultFieldNameFor: #zipCode)								with: (EmbededMapping withDefaultFieldNameFor: #province)))				with:					(ClassMapping						withDefaultTableNameFor: Customer						mappingAll:							(Array								with: (EmbededMapping withDefaultFieldNameFor: #firstName)								with: (EmbededMapping withDefaultFieldNameFor: #lastName)								with: (EmbededMapping withDefaultFieldNameFor: #identificationType)								with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)								with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address)))).	session open.	session beginTransaction! !!CustomerImporterTest methodsFor: 'importing' stamp: 'LJ 11/7/2017 00:42'!tearDown	session commit.	session close.	inputStream close! !!CustomerImporterTest methodsFor: 'importing' stamp: 'LJ 11/7/2017 01:28'!importCustomers	"	self importCustomers	"	customerImporter importTo: session from: inputStream.! !