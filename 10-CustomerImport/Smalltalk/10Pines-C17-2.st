Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Address methodsFor: 'instance creation' stamp: 'LJ 11/19/2017 10:26'!withStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince	streetName := aStreetName.	streetNumber := aStreetNumber.	town := aTown.	zipCode := aZipCode.	province := aProvince.! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'province' stamp: 'LJ 11/19/2017 10:27'!isAt: aStreetName	^streetName = aStreetName! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Address class	instanceVariableNames: ''!!Address class methodsFor: 'instance creation' stamp: 'LJ 11/19/2017 10:22'!withStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince 	^ super new withStreetName: aStreetName streetNumber: aStreetNumber town: aTown zipCode: aZipCode province: aProvince.! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'session importer system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:53'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/1/2016 17:48'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:50'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'LJ 11/19/2017 16:03'!alwaysImportedCustomer	^ self		customerIdentifiedAs: self alwaysImportedCustomerIdType numbered:self alwaysImportedCustomerIdNumber! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/1/2016 15:59'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'initialization' stamp: 'LJ 11/19/2017 11:47'!setUp	system := Environment current createErpSystem.	system start.	system beginTransaction! !!CustomerImportTest methodsFor: 'asserting' stamp: 'LJ 11/16/2017 19:03'!assertImportedCustomersSizeIsCorrect	self assert: system allCustomersSize equals: 2! !!CustomerImportTest methodsFor: 'asserting' stamp: 'LJ 11/19/2017 16:29'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: (customer isIdentifiedAs: (Identification withIdentificationType: idType identificationNumber: idNumber)).	self assert: customer numberOfAddresses equals: addressesSize! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:14'!assertJuanPerezWasImportedCorrectly		| customer idType idNumber |		idType := 'C'.	idNumber := '23-25666777-9'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Juan' lastName: 'Perez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 1.	self assert: customer hasAddressAt: 'Alem' number: 1122 in: 'CABA' zipCode: 1001 province: 'CABA'.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'LJ 11/19/2017 16:13'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idType numbered: idNumber.	self		assert: customer		isNamed: 'Pepe'		lastName: 'Sanchez'		identfiedAs: idType 		withNumber: idNumber		andNumberOfAddresses: 2.	self		assert: customer		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assert: customer		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'importing' stamp: 'LJ 11/19/2017 16:29'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	^ system customerIdentifiedAs: (Identification withIdentificationType: anIdentifycationType identificationNumber: anIdentificationNumber)! !!CustomerImportTest methodsFor: 'importing' stamp: 'LJ 11/13/2017 20:29'!importCustomersFrom: inputStream	(CustomerImporter from: inputStream on: system) import! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 15:52'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 10:46'!validTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'LJ 11/16/2017 19:07'!customersIsEmpty	^ system allCustomersIsEmpty.! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:50'!testCanNotImportCustomerRecordWithLessThanFiveFields	self 		should: [ self importCustomersFrom: self customerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: self customersIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 15:56'!testImportCustomers	self importCustomersFrom: self validTestData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importCustomersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 15:52'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importCustomersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 15:58'!testCanNotImportAddressWithoutCustomer	self 		should: [ self importCustomersFrom: self addressWithoutCustomerTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError |			self assert: anError messageText equals: CustomerImporter addressWithoutCustomerErrorDescription.			self assert: self customersIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 17:47'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self 		should: [ self importCustomersFrom: self customerRecordStartingWithMoreThanOneCTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError |			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self customersIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:41'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importCustomersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importCustomersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:53'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self 		should: [ self importCustomersFrom: self customerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: self customersIsEmpty ]	! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'LJ 11/13/2017 21:13'!tearDown	system commit.	system stop.! !Object subclass: #CustomerImporter	instanceVariableNames: 'line readStream record newCustomer system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:55'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'LJ 11/19/2017 16:29'!importCustomer	self assertValidCustomerRecordSize.		newCustomer := Customer withFirstName: (record second) lastName: (record third)  identification: (Identification withIdentificationType: (record fourth) identificationNumber: (record fifth)).	system addCustomer: newCustomer! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'LJ 11/19/2017 11:39'!isExistingCustomerRecord	^ record first = 'N' and: record second = 'C'.! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'LJ 11/19/2017 11:36'!isSupplierRecord	^ record first = 'S'! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'LJ 11/19/2017 11:39'!isNewCustomerRecord	^ record first = 'E' and: record second = 'C'! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:56'!assertThereIsCustsomerForAddress	newCustomer isNil ifTrue: [ self signalAddressWithoutCustomerError ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:55'!isAddressRecord	^ record first = 'A'! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'LJ 11/19/2017 10:20'!importAddress	| newAddress |	self assertThereIsCustsomerForAddress.	self assertValidAddressRecordSize.	newAddress := Address withStreetName: (record second)		streetNumber: record third asInteger		town: record fourth		zipCode: record fifth asInteger 		province: record sixth.		^ newCustomer addAddress: newAddress! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!CustomerImporter methodsFor: 'initialization' stamp: 'LJ 11/16/2017 18:24'!initializeOn: aReadStream on: aSession	readStream := aReadStream.	system := aSession.! !!CustomerImporter methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 17:51'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/2/2016 10:52'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 18:01'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 17:54'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 16:01'!signalAddressWithoutCustomerError	self error: self class addressWithoutCustomerErrorDescription.! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:54'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!CustomerImporter methodsFor: 'importing - private' stamp: 'LJ 11/19/2017 11:39'!importRecord	self isCustomerRecord		ifTrue: [ ^ self importCustomer ].	self isAddressRecord		ifTrue: [ ^ self importAddress ].	self isSupplierRecord		ifTrue: [ ^ self importSupplier ].	self isExistingCustomerRecord		ifTrue: [ ^ self importExistingCustomerIfActiveSupplier ].	self isNewCustomerRecord		ifTrue: [ ^ self importNewCustomerIfActiveSupplier ].	self signalInvalidRecordType! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 10:55'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:55'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'instance creation' stamp: 'LJ 11/16/2017 19:08'!from: aReadStream on: aSystem	^ self new initializeOn: aReadStream on: aSystem! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 18:00'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/2/2016 10:51'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 16:02'!addressWithoutCustomerErrorDescription		^'There is no Customer for the imported address'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 17:54'!invalidRecordTypeErrorDescription		^'Invalid record type'! !Object subclass: #CustomerSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerSystem methodsFor: 'customers' stamp: 'LJ 11/16/2017 19:02'!allCustomersSize	 ^ self subclassResponsibility .! !!CustomerSystem methodsFor: 'customers' stamp: 'LJ 11/16/2017 19:00'!addCustomer: aCustomer	^ self subclassResponsibility.! !!CustomerSystem methodsFor: 'customers' stamp: 'LJ 11/19/2017 15:52'!customerIdentifiedAs: anId	self subclassResponsibility.! !!CustomerSystem methodsFor: 'customers' stamp: 'LJ 11/16/2017 19:05'!allCustomersIsEmpty	^ self subclassResponsibility! !!CustomerSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/13/2017 20:51'!commit	^ self subclassResponsibility.! !!CustomerSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/13/2017 20:52'!beginTransaction	^ self subclassResponsibility.! !!CustomerSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/13/2017 20:51'!start	^ self subclassResponsibility.! !!CustomerSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/13/2017 21:14'!stop	^ self subclassResponsibility.! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Environment methodsFor: 'as yet unclassified' stamp: 'LJ 11/19/2017 11:47'!createErpSystem	^ self subclassResponsibility .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'accessing' stamp: 'LJ 11/13/2017 20:43'!current	^ self subclasses detect: [:aSubclass | aSubclass isCurrent ]  ifFound: [:aSubclass | aSubclass new ]  ifNone: [ self error: self noEnvironmentFoundErrorMessage ] .! !!Environment class methodsFor: 'testing' stamp: 'LJ 11/13/2017 20:41'!isCurrent	^ self subclassResponsibility .! !!Environment class methodsFor: 'as yet unclassified' stamp: 'LJ 11/13/2017 20:39'!noEnvironmentFoundErrorMessage	^ 'No environment found'! !Environment subclass: #DevelopmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!DevelopmentEnvironment methodsFor: 'as yet unclassified' stamp: 'LJ 11/19/2017 11:52'!createErpSystem	^ ErpSystem withCustomerSystem: TransientCustomerSystem new supplierSystem: TransientSupplierSystem new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelopmentEnvironment class	instanceVariableNames: ''!!DevelopmentEnvironment class methodsFor: 'testing' stamp: 'LJ 11/13/2017 20:41'!isCurrent	^ IntegrationEnvironment isCurrent not.! !Object subclass: #ErpSystem	instanceVariableNames: 'customerSystem supplierSystem session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!ErpSystem methodsFor: 'customers' stamp: 'LJ 11/19/2017 12:36'!allCustomersSize	^ customerSystem allCustomersSize! !!ErpSystem methodsFor: 'customers' stamp: 'LJ 11/19/2017 12:24'!addCustomer: aCustomer	customerSystem addCustomer: aCustomer.! !!ErpSystem methodsFor: 'customers' stamp: 'LJ 11/19/2017 15:53'!customerIdentifiedAs: anId	^ customerSystem customerIdentifiedAs: anId.! !!ErpSystem methodsFor: 'customers' stamp: 'LJ 11/19/2017 12:36'!allCustomersIsEmpty	^ customerSystem allCustomersIsEmpty! !!ErpSystem methodsFor: 'as yet unclassified' stamp: 'LJ 11/19/2017 11:53'!withCustomerSystem: aCustomerSystem supplierSystem: aSupplierSystem	customerSystem := aCustomerSystem.	supplierSystem := aSupplierSystem.! !!ErpSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/19/2017 12:22'!commit	customerSystem commit.	supplierSystem commit.! !!ErpSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/19/2017 12:22'!start	customerSystem start.	supplierSystem start.! !!ErpSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/19/2017 12:22'!beginTransaction	customerSystem beginTransaction.	supplierSystem beginTransaction.! !!ErpSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/19/2017 12:23'!stop	supplierSystem stop.	customerSystem stop.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ErpSystem class	instanceVariableNames: ''!!ErpSystem class methodsFor: 'as yet unclassified' stamp: 'LJ 11/19/2017 11:53'!withCustomerSystem: aCustomerSystem supplierSystem: aSupplierSystem	^ self new withCustomerSystem: aCustomerSystem supplierSystem: aSupplierSystem.! !Object subclass: #Identification	instanceVariableNames: 'id identificationType identificationNumber'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Identification methodsFor: 'accessing' stamp: 'LJ 11/19/2017 16:10'!identificationNumber	^ identificationNumber! !!Identification methodsFor: 'accessing' stamp: 'LJ 11/19/2017 16:10'!identificationType	^ identificationType.! !!Identification methodsFor: 'as yet unclassified' stamp: 'LJ 11/19/2017 15:56'!withIdentificationType: anIdentificationType identificationNumber: anIdentificationNumber	identificationType := anIdentificationType.	identificationNumber := anIdentificationNumber ! !!Identification methodsFor: 'comparing' stamp: 'LJ 11/19/2017 16:10'!= anId	^ identificationType = anId identificationType and: [ identificationNumber = anId identificationNumber ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Identification class	instanceVariableNames: ''!!Identification class methodsFor: 'as yet unclassified' stamp: 'LJ 11/19/2017 15:55'!withIdentificationType: anIdentificationType identificationNumber: anIdentificationNumber	^ self new withIdentificationType: anIdentificationType identificationNumber: anIdentificationNumber.! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!IntegrationEnvironment methodsFor: 'as yet unclassified' stamp: 'LJ 11/19/2017 11:54'!createErpSystem	^ ErpSystem withCustomerSystem: PersistentCustomerSystem new supplierSystem: PersistentSupplierSystem new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'testing' stamp: 'LJ 11/20/2017 09:28'!isCurrent	^ true! !Object subclass: #Party	instanceVariableNames: 'id identification'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Party methodsFor: 'identification' stamp: 'LJ 11/20/2017 09:28'!isIdentifiedAs: anId	^ identification = anId.! !Party subclass: #Customer	instanceVariableNames: 'firstName lastName addresses'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 18:03'!addressesIsEmpty		^addresses isEmpty! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'initialization' stamp: 'LJ 11/19/2017 10:07'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'initialization' stamp: 'LJ 11/20/2017 09:27'!withFirstName: aFirstName lastName: aLastName identification: anIdentification	super initialize.	firstName := aFirstName.	lastName := aLastName.	identification := anIdentification.	addresses := OrderedCollection new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Customer class	instanceVariableNames: ''!!Customer class methodsFor: 'accessing' stamp: 'LJ 11/19/2017 16:29'!withFirstName: aFirstName lastName: aLastName identification: anIdentification	^ super new withFirstName: aFirstName lastName: aLastName identification: anIdentification! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PersistentCustomerSystem methodsFor: 'mapping' stamp: 'LJ 11/19/2017 16:29'!idMapping	^ ClassMapping		withDefaultTableNameFor: Identification		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				)! !!PersistentCustomerSystem methodsFor: 'mapping' stamp: 'LJ 11/13/2017 20:13'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentCustomerSystem methodsFor: 'mapping' stamp: 'LJ 11/19/2017 16:47'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identification)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'LJ 11/16/2017 19:03'!allCustomersSize	^ (session selectAllOfType: Customer) size.! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'LJ 11/16/2017 19:00'!addCustomer: aCustomer	session addCustomer: aCustomer.! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'LJ 11/19/2017 15:53'!customerIdentifiedAs: anId	| customers |	customers := session		select: [ :aCustomer | aCustomer isIdentifiedAs: anId]		ofType: Customer.	customers size = 1		ifFalse: [ self error: 'There should be just one client identified.' ].	^ customers anyOne! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'LJ 11/16/2017 19:05'!allCustomersIsEmpty	^ self allCustomersSize = 0.! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'LJ 11/13/2017 21:14'!stop	session close.! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'LJ 11/13/2017 20:22'!beginTransaction	session beginTransaction.! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'LJ 11/19/2017 16:25'!start	session := DataBaseSession for: (Array with: self addressMapping with: self customerMapping with: self idMapping ).	session open! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'LJ 11/13/2017 20:23'!commit	session commit.! !Party subclass: #Supplier	instanceVariableNames: 'name customers addresses'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Supplier methodsFor: 'accessing' stamp: 'LJ 11/19/2017 15:04'!addCustomer: aCustomer	^ customers add: aCustomer! !!Supplier methodsFor: 'accessing' stamp: 'LJ 11/19/2017 15:03'!numberOfCustomers	^ customers size! !!Supplier methodsFor: 'accessing' stamp: 'LJ 11/19/2017 10:03'!name	^ name! !!Supplier methodsFor: 'accessing' stamp: 'LJ 11/19/2017 15:03'!numberOfAddresses	^ addresses size! !!Supplier methodsFor: 'accessing' stamp: 'LJ 11/19/2017 15:05'!customersIsEmpty	^ customers isEmpty! !!Supplier methodsFor: 'accessing' stamp: 'LJ 11/19/2017 15:05'!addressesIsEmpty	^ addresses isEmpty! !!Supplier methodsFor: 'accessing' stamp: 'LJ 11/19/2017 15:04'!addAddress: anAddress	^ addresses add: anAddress.! !Object subclass: #SupplierSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierSystem methodsFor: 'suppliers' stamp: 'LJ 11/19/2017 15:34'!allSuppliersIsEmpty	self subclassResponsibility! !!SupplierSystem methodsFor: 'suppliers' stamp: 'LJ 11/19/2017 15:34'!allSuppliersSize	self subclassResponsibility! !!SupplierSystem methodsFor: 'suppliers' stamp: 'LJ 11/19/2017 15:34'!addSuplier: aSupplier	self subclassResponsibility! !!SupplierSystem methodsFor: 'suppliers' stamp: 'LJ 11/19/2017 15:52'!supplierIdentifiedAs: anId	^ self subclassResponsibility! !!SupplierSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/19/2017 15:31'!commit	^ self subclassResponsibility! !!SupplierSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/19/2017 15:31'!start	^ self subclassResponsibility! !!SupplierSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/19/2017 15:31'!beginTransaction	^ self subclassResponsibility.! !!SupplierSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/19/2017 15:31'!stop	^ self subclassResponsibility! !!SupplierSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/19/2017 15:32'!addSupplier: aSupplier	^ self subclassResponsibility! !SupplierSystem subclass: #PersistentSupplierSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PersistentSupplierSystem methodsFor: 'mapping' stamp: 'LJ 11/19/2017 14:33'!commit	session commit! !!PersistentSupplierSystem methodsFor: 'mapping' stamp: 'LJ 11/19/2017 16:31'!supplierMapping	^ ClassMapping withDefaultTableNameFor: Supplier mappingAll: (Array with: (EmbededMapping withDefaultFieldNameFor: #name)					with: (OneToManyMapping withDefaultFieldNameFor: #id ofType: Identification))! !!PersistentSupplierSystem methodsFor: 'mapping' stamp: 'LJ 11/19/2017 14:34'!start	session := DataBaseSession		for: (Array with: self supplierMapping ).	session open! !!PersistentSupplierSystem methodsFor: 'mapping' stamp: 'LJ 11/19/2017 14:33'!beginTransaction	session beginTransaction! !!PersistentSupplierSystem methodsFor: 'mapping' stamp: 'LJ 11/19/2017 14:34'!stop	session close! !!PersistentSupplierSystem methodsFor: 'suppliers' stamp: 'LJ 11/19/2017 15:37'!allSuppliersIsEmpty	^ self allSuppliersSize = 0! !!PersistentSupplierSystem methodsFor: 'suppliers' stamp: 'LJ 11/19/2017 15:38'!allSuppliersSize	^ (session selectAllOfType: Supplier) size! !!PersistentSupplierSystem methodsFor: 'suppliers' stamp: 'LJ 11/19/2017 15:51'!supplierIdentifiedAs: anId	| suppliers |	suppliers := session		select: [ :aSupplier | aSupplier isIdentifiedAs: anId ]		ofType: Supplier.	suppliers size = 1		ifFalse: [ self error: 'There should be just one client identified.' ].	^ suppliers anyOne! !!PersistentSupplierSystem methodsFor: 'suppliers' stamp: 'LJ 11/19/2017 15:37'!addSupplier: aSupplier	session addSupplier: aSupplier! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'customers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!TransientCustomerSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/13/2017 21:14'!stop! !!TransientCustomerSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/13/2017 21:12'!start	customers := OrderedCollection new.! !!TransientCustomerSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/13/2017 21:02'!beginTransaction! !!TransientCustomerSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/13/2017 21:03'!commit! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'LJ 11/16/2017 19:03'!allCustomersSize	^ customers size.! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'LJ 11/16/2017 19:00'!addCustomer: aCustomer	customers add: aCustomer.! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'LJ 11/19/2017 15:54'!customerIdentifiedAs: anId	| customer |	customer := customers select: [ :aCustomer | aCustomer isIdentifiedAs: anId ].	customer size = 1		ifFalse: [ self error: 'There should be just one client identified.' ].	^ customer anyOne! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'LJ 11/16/2017 19:06'!allCustomersIsEmpty	^ self allCustomersSize = 0.! !SupplierSystem subclass: #TransientSupplierSystem	instanceVariableNames: 'suppliers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!TransientSupplierSystem methodsFor: 'suppliers' stamp: 'LJ 11/19/2017 15:51'!suppliersIdentifiedAs: anId	| supplier |	supplier := suppliers select: [ :aSupplier | aSupplier isIdentifiedAs: anId ].	supplier size = 1		ifFalse: [ self error: 'There should be just one supplier identified.' ].	^ supplier anyOne! !!TransientSupplierSystem methodsFor: 'suppliers' stamp: 'LJ 11/19/2017 15:33'!allSuppliersIsEmpty	^ suppliers isEmpty.! !!TransientSupplierSystem methodsFor: 'suppliers' stamp: 'LJ 11/19/2017 15:33'!allSuppliersSize	^ suppliers size.! !!TransientSupplierSystem methodsFor: 'suppliers' stamp: 'LJ 11/19/2017 15:33'!addSupplier: aSupplier	suppliers add: aSupplier.! !!TransientSupplierSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/19/2017 12:28'!commit! !!TransientSupplierSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/19/2017 12:29'!start	suppliers = OrderedCollection new.	! !!TransientSupplierSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/19/2017 12:27'!beginTransaction	! !!TransientSupplierSystem methodsFor: 'setUp - tearDown' stamp: 'LJ 11/19/2017 12:28'!stop	! !'From Pharo6.0 of 13 May 2016 [Latest update: #60499] on 20 November 2017 at 9:29:11.629211 am'!!String methodsFor: '*10Pines-C17-2' stamp: 'HernanWilkinson 10/31/2016 23:57'!asPlural		^self last = $s 		ifTrue: [ self, 'es' ]		ifFalse: [ self, 's' ]! !'From Pharo6.0 of 13 May 2016 [Latest update: #60499] on 20 November 2017 at 9:29:11.630178 am'!!Object methodsFor: '*10Pines-C17-2' stamp: 'HernanWilkinson 10/31/2016 19:27'!toDo: aString 	! !